source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# 3.2.4 Exercises
# Run ggplot(data = mpg). What do you see?
ggplot(data = mpg)
ggplot(data = mpg)
source('~/R/SYSPreClass/Ch3.R', echo=TRUE)
source('~/R/SYSPreClass/Ch3.R', echo=TRUE)
source('~/R/SYSPreClass/Ch3.R', echo=TRUE)
source('~/R/SYSPreClass/Ch3.R', echo=TRUE)
# For example, you can map the colors of your points
# to the class variable to reveal the class of each car.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
source('~/R/SYSPreClass/Ch3.R', encoding = 'UTF-8', echo=TRUE)
source('~/R/SYSPreClass/Ch3.R', encoding = 'UTF-8', echo=TRUE)
# If you prefer to not facet in the rows or columns dimension, use a . instead
# of a variable name, e.g. + facet_grid(. ~ cyl).
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
# To facet your plot on the combination of two variables, add facet_grid()
# to your plot call. The first argument of facet_grid() is also a formula.
# This time the formula should contain two variable names separated by a ~.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
# left
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# Smooth geom
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
# To display multiple geoms in the same plot,
# add multiple geom functions to ggplot():
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
# Avoid duplication by passing a set of mappings to ggplot()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
# Groups with distinction
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
# Avoid duplication by passing a set of mappings to ggplot()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
# If you place mappings in a geom function, ggplot2 will treat them as
# local mappings for the layer. It will use these mappings to extend or
# overwrite the global mappings for that layer only.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
# Here, our smooth line displays just a subset of the mpg dataset,
# the subcompact cars. The local data argument in geom_smooth() overrides
# the global data argument in ggplot() for that layer only.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
# 3.7 Statistical transformations
# bar graph of diamonds dataset
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
# You can generally use geoms and stats interchangeably. For example,
# you can recreate the previous plot using stat_count() instead of geom_bar():
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))
#   To draw greater attention to the statistical transformation in your code
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
# Color a bar chart using either colour aesthetic or more usefully fill
# Outlines the bars in different colors
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
# Fills the bars in different colors
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
# map the fill aesthetic to another variable, like clarity:
# the bars are automatically stacked.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# The stacking is performed automatically by the position adjustment
# specified by the position argument.
# If you don’t want a stacked bar chart, you can use one of three other options:
# "identity", "dodge" or "fill".
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
# position = "identity" will place each object exactly where it falls
# in the context of the graph. This is not very useful for bars, because
# it overlaps them. To see that overlapping we either need to make the bars
# slightly transparent by setting alpha to a small value, or completely
# transparent by setting fill = NA.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
# position = "dodge" places overlapping objects directly beside one another.
# This makes it easier to compare individual values.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
# Overplotting: values are rounded so mant points overlap each other
# Avoid this by using position = "jitter" which adds a small amount of noise
# to each point, thereby spreading the points out, so they don't overlap.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
# Using coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
# Using coord_quickmap()
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
nz <- map_data("nz")
# Original
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
# Using coord_quickmap()
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
# coord_quickmap() sets the aspect ratio correctly for maps
nz <- map_data("nz")
# Original
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
# Using coord_quickmap()
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
# Load packages
library(nycflights13)
library(tidyverse)
flights
?flights
View(flights)
# to save the new data frame assign it to a variable
jan1 <- filter(flights, month == 1, day == 1)
# R either prints out the results, or saves them to a variable. If you want
# to do both, you can wrap the assignment in parentheses:
(dec25 <- filter(flights, month == 12, day == 25))
# The following code finds all flights that departed in November or December:
filter(flights, month == 11 | month == 12)
# select every row where x is one of the values in y
nov_dec <- filter(flights, month %in% c(11, 12))
# 5.3 Arrange rows with arrange()
# arrange() takes a data frame and a set of column names
# (or more complicated expressions) to order by
arrange(flights, year, month, day)
library(Lahman)
# 5.1 Introduction
# Load packages
library(nycflights13)
library(tidyverse)
View(flights)
# 7.1 Introduction
# Load packages
library(tidyverse)
library(nycflights13)
install hexbin
install.packages("hexbin")
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
# install.packages("hexbin")
library(hexbin)
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
install.packages('rmarkdown')
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
flights
library(nycflights13)
library(tidyverse)
flights
ggplot(flights, dep_delay, arr_delay, color = origin) +
geom_point()
str(flights)
ggplot(flights, x = dep_delay, y = arr_delay, color = origin) +
geom_point()
ggplot(flights, aes(dep_delay, arr_delay, color = origin)) +
geom_point()
flights %>%
group_by(origin) %>% summarize(med_dep_delay = median(dep_delay))
flights
?flights
View(flights)
flights %>%
group_by(origin) %>% summarize(med_dep_delay = median(dep_delay,na.rm=TRUE))
flights %>%
group_by(origin) %>% summarize(mean_dep_delay = mean(dep_delay,na.rm=TRUE))
flights %>%
group_by(origin) %>% summarize(mean_dep_delay = mean(dep_delay,na.rm=TRUE),med_dep_delay = median(dep_delay,na.rm=TRUE),mean_arr_delay = mean(arr_delay,na.rm=TRUE),med_arr_delay = median(arr_delay,na.rm=TRUE))
flights %>%
group_by(origin) %>% summarize(mean_dep_delay = mean(dep_delay,na.rm=TRUE),med_dep_delay = median(dep_delay,na.rm=TRUE),mean_arr_delay = mean(arr_delay,na.rm=TRUE),med_arr_delay = median(arr_delay,na.rm=TRUE))
ggplot(data = flights, mapping = aes(x = origin, y = dep_delay)) +
geom_boxplot() +
ylim(-20,100)
ggplot(data = flights, mapping = aes(x = origin, y = dep_delay)) +
geom_boxplot() +
ylim(-20,50)
ggplot(data = flights, mapping = aes(x = origin, y = dep_delay)) +
geom_boxplot() +
ylim(-20,20)
ggplot(data = flights, mapping = aes(x = origin, y = arr_delay)) +
geom_boxplot() +
ylim(-60,60)
ggplot(data = flights, mapping = aes(x = origin, y = dep_delay)) +
geom_boxplot() +
ylim(-20,20)
ggplot(data = flights, mapping = aes(x = origin, y = arr_delay)) +
geom_boxplot() +
ylim(-60,60)
ggplot(diamonds2, aes(lcarat, lprice)) +
geom_hex(bins = 50)
#>   date           n wday  resid
#>   <date>     <int> <ord> <dbl>
#> 1 2013-01-01   842 Tue   -109.
#> 2 2013-01-20   786 Sun   -105.
#> 3 2013-05-26   729 Sun   -162.
#> 4 2013-07-04   737 Thu   -229.
#> 5 2013-07-05   822 Fri   -145.
#> 6 2013-09-01   718 Sun   -173.
#> # … with 5 more rows
